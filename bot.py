import config
import datetime
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, filters
from aiogram.utils import executor
from loguru import logger
from google_sheet_table import GoogleTable

logger.add(
    config.settings["LOG_FILE"],
    format="{time} {level} {message}",
    level="DEBUG",
    rotation="1 week",
    compression="zip",
)


class FreakTelegramBot(Bot):
    def __init__(
            self,
            token,
            parse_mode,
            google_table=None,
    ):
        super().__init__(token, parse_mode=parse_mode)
        self._google_table: GoogleTable = google_table

    @property
    def google_table(self):
        return self._google_table


bot = FreakTelegramBot(
    token=config.settings["TOKEN"],
    parse_mode=types.ParseMode.HTML,
    google_table=GoogleTable("cupoftea.json",
                             "https://docs.google.com/svoi_znachenia_vstavte"),
)
CupOfTea = Dispatcher(bot)

@CupOfTea.message_handler(filters.Regexp(regexp=r"(((|S|s)tart))"))
async def bot_commands_handler(message_from: types.Message) -> None:
    user_id: str = str(message_from.from_id)
    text_msg: str = message_from.md_text.strip(" @#")
    command: str = text_msg.lower()
    print(f"–í—Ö–æ–¥: –∫–æ–º–∞–Ω–¥–∞ '{command}'")

    message: str = (
        f"–†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å)\n\n"
        f"–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ: –∫–æ–º–∞–Ω–¥—ã \n\n"
    )

    try:
        await message_from.reply(message)
    except Exception as send_error:
        logger.debug(f"{send_error.message}: Trouble id: {user_id}")
        return

@CupOfTea.message_handler(filters.Regexp(regexp=r"(((–ß|—á)–∞–π)(\s)(\d+))"))
async def abonement_handler(message_from: types.Message) -> None:
    user_id: str = str(message_from.from_id)
    text_msg: str = message_from.md_text.strip(" @#")
    command, number = text_msg.lower().split(' ')
    print(f"–í—Ö–æ–¥: –∫–æ–º–∞–Ω–¥–∞ '{command}', –æ–ø—Ü–∏—è '{number}'")

    values: int = bot.google_table.search_abonement(number)

    if values == -1:
        message = f'–≤—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∫ –Ω–∞–º –Ω–∞ —á–∞–π, –∫—É–ø–∏—Ç–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç üò∞'
    else:
        end_date_value: datetime = values[0]
        balance_value: int = int(values[1])
        last_digit: int = balance_value % 10

        if last_digit == 1 and balance_value != 11:
            balance_value: str = f'{balance_value} –ø–æ—Å–µ—â–µ–Ω–∏–µ'
        elif last_digit in (2, 3, 4) and balance_value not in (12, 13, 14):
            balance_value: str = f'{balance_value} –ø–æ—Å–µ—â–µ–Ω–∏—è'
        else:
            balance_value: str = f'{balance_value} –ø–æ—Å–µ—à–µ–Ω–∏–π'

        message: str = f'üóì –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫ –Ω–∞–º –Ω–∞ —á–∞–π –¥–æ: {end_date_value}\nüíÉ –£ –í–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {balance_value}'

    try:
        await message_from.reply(message)
    except Exception as send_error:
        logger.debug(f"{send_error.message}: Trouble id: {user_id}")
        return


@CupOfTea.message_handler(filters.Regexp(regexp=r"(((–ö|–∫)–æ–º–∞–Ω–¥—ã))"))
async def bot_commands_handler(message_from: types.Message) -> None:
    user_id: str = str(message_from.from_id)
    text_msg: str = message_from.md_text.strip(" @#")
    command: str = text_msg.lower()
    print(f"–í—Ö–æ–¥: –∫–æ–º–∞–Ω–¥–∞ '{command}'")

    message: str = (
        f"ü§ñ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ß–ê–¢-–ë–û–¢–ê: ü§ñ\n\n"
        f"‚ùó –ö–æ–º–∞–Ω–¥—ã ‚ùó\n"
        f"--–≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —á–∞—Ç-–±–æ—Ç–∞ üì£\n\n"
        f"üåø –ß–∞–π *** üåø\n"
        f"--(*** - ‚Ññ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞) –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç–µ (–¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ—Å–µ—â–µ–Ω–∏–π) üîñ\n\n"
        f"üîé –ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è üîç\n"
        f"--–Ω–∞—à –∞–¥—Ä–µ—Å, –∫–∞—Ä—Ç–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, –∫–∞–∫ –Ω–∞—Å –Ω–∞–π—Ç–∏ üó∫\n\n"
        f"üí≤ –¶–µ–Ω—ã üí≤\n"
        f"-- —Ü–µ–Ω—ã –Ω–∞ —á–∞–π  üí∞\n\n"
        f"üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì\n"
        f"-- —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã üìÜ\n\n"
        f"–ï—Å–ª–∏ —É –í–∞—Å –∏–Ω–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ 'help' –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º üë§"
    )

    try:
        await message_from.reply(message)
    except Exception as send_error:
        logger.debug(f"{send_error.message}: Trouble id: {user_id}")
        return

@CupOfTea.message_handler(filters.Regexp(regexp=r"(((–ö|–∫)–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è))"))
async def bot_commands_handler(message_from: types.Message) -> None:
    user_id: str = str(message_from.from_id)
    text_msg: str = message_from.md_text.strip(" @#")
    command: str = text_msg.lower()
    print(f"–í—Ö–æ–¥: –∫–æ–º–∞–Ω–¥–∞ '{command}'")

    message: str = (
        f"–ù–∞—Å –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ,\n\n"
        f"–¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–∏—Å–∫–æ–≤–∏–∫–µ:\n\n"
        f"Pumpezny's House\n\n"
        f"–≤–æ—Ç —Å—Å—ã–ª–∫–∞: https://pumpeznys-house.business.site/\n"


    )

    try:
        await message_from.reply(message)
    except Exception as send_error:
        logger.debug(f"{send_error.message}: Trouble id: {user_id}")
        return

@CupOfTea.message_handler(filters.Regexp(regexp=r"(((–¶|—Ü)–µ–Ω—ã))"))
async def prices_handler(message_from: types.Message) -> None:
    user_id: str = str(message_from.from_id)
    text_msg: str = message_from.md_text.strip(" @#")
    command: str = text_msg.lower()
    print(f"–í—Ö–æ–¥: –∫–æ–º–∞–Ω–¥–∞ '{command}'")
    try:
        with open('res/price.jpg', 'rb') as photo:
            await bot.send_photo(user_id, photo)
    except Exception as send_error:
        logger.debug(f"{send_error.message}: Trouble id: {user_id}")
        return

@CupOfTea.message_handler(filters.Regexp(regexp=r"(((–†|—Ä)–∞—Å–ø–∏—Å–∞–Ω–∏–µ))"))
async def schedule_adults_handler(message_from: types.Message) -> None:
  user_id: str = str(message_from.from_id)
  text_msg: str = message_from.md_text.strip(" @#")
  command:str = text_msg.lower()
  print(f"–í—Ö–æ–¥: –∫–æ–º–∞–Ω–¥–∞ '{command}'")
  try:
    with open('res/timetable.jpg', 'rb') as photo:
        await bot.send_photo(user_id, photo)
  except Exception as send_error:
    logger.debug(f"{send_error.message}: Trouble id: {user_id}")
    return

@CupOfTea.message_handler(filters.Regexp(regexp=r"(((H|h)elp))"))
async def bot_commands_handler(message_from: types.Message) -> None:
    user_id: str = str(message_from.from_id)
    text_msg: str = message_from.md_text.strip(" @#")
    command: str = text_msg.lower()
    print(f"–í—Ö–æ–¥: –∫–æ–º–∞–Ω–¥–∞ '{command}'")

    message: str = (
        f"–î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: @Saaaaaaaaaaaab \n\n"
        f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!)\n\n"

    )

    try:
        await message_from.reply(message)
    except Exception as send_error:
        logger.debug(f"{send_error.message}: Trouble id: {user_id}")
        return


if __name__ == '__main__':
    executor.start_polling(CupOfTea, skip_updates=True)
